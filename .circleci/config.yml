# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    working_directory: ~/diet_tracker
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.0-stretch
        environment:
          PGHOST: localhost
          PGUSER: diet_tracker
          RAILS_ENV: test
      - image: circleci/postgres:11.2-alpine
        environment:
          POSTGRES_USER: diet_tracker
          POSTGRES_DB: diet_tracker_test
          POSTGRES_PASSWORD: ""

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4


    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: sudo apt-get install ruby-full cmake

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

  test:
    working_directory: ~/diet_tracker
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.0-stretch
        environment:
          PGHOST: localhost
          PGUSER: diet_tracker
          RAILS_ENV: test
      - image: circleci/postgres:11.2-alpine
        environment:
          POSTGRES_USER: diet_tracker
          POSTGRES_DB: diet_tracker_test
          POSTGRES_PASSWORD: ""

    steps:
      # Database setup
      - run: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: bundle exec rake db:create
#      - run: bundle exec rake db:schema:load

      # Code quality control
      - run:
          name: Pronto - code quality
          command: PRONTO_PULL_REQUEST_ID=${CI_PULL_REQUEST##*/} bundle exec pronto run -f github_pr -c origin/master

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec --format d

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
